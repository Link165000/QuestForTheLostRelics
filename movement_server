import socket
import threading

# Map grid
game_map = [
    ['W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W'],
    ['W', 'D', 'D', 'I', 'I', 'I', 'I', 'I', 'M', 'M'],
    ['W', 'D', 'D', 'I', 'I', 'I', 'I', 'M', 'M', 'M'],
    ['W', 'I', 'I', 'I', 'I', 'M', 'M', 'M', 'M', 'M'],
    ['W', 'I', 'I', 'I', 'I', 'M', 'M', 'M', 'M', 'M'],
    ['W', 'I', 'I', 'I', 'I', 'M', 'M', 'M', 'M', 'G'],
    ['W', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G'],
    ['W', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'D', 'D'],
    ['W', 'L', 'L', 'L', 'G', 'G', 'G', 'G', 'G', 'G'],
    ['W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W']
]

# Players and their positions
players = {}

# Define ANSI color codes for each player
player_colors = [
    "\033[91m",  # Red
    "\033[92m",  # Green
    "\033[93m",  # Yellow
    "\033[94m",  # Blue
    "\033[95m",  # Magenta
    "\033[96m",  # Cyan
]

# Reset color
reset_color = "\033[0m"

# Keep track of players and assign colors
player_color_map = {}

# Update player position
def update_map(player_name, direction):
    player_x, player_y = players[player_name]

    # Movement logic
    if direction == 'W' and player_y > 0:
        player_y -= 1
    elif direction == 'A' and player_x > 0:
        player_x -= 1
    elif direction == 'S' and player_y < len(game_map) - 1:
        player_y += 1
    elif direction == 'D' and player_x < len(game_map[0]) - 1:
        player_x += 1

    players[player_name] = (player_x, player_y)

# Function to display the map with player blocks
def display_map():
    temp_map = [row.copy() for row in game_map]
    for player, (x, y) in players.items():
        color = player_color_map[player]
        temp_map[y][x] = f"{color}â–ˆ{reset_color}"  # Colored block for player
    return temp_map

# Broadcast map to all clients
def broadcast_map():
    map_data = "\n".join([" ".join(row) for row in display_map()])
    for client in clients:
        client.sendall(map_data.encode())

# Handle each client
def handle_client(client, address):
    name = client.recv(1024).decode()

    # Assign color and position
    players[name] = (4, 4)  # Default position
    player_color_map[name] = player_colors[len(players) % len(player_colors)]  # Assign color

    # Send map updates
    while True:
        try:
            data = client.recv(1024).decode()
            if not data:
                break
            update_map(name, data)
            broadcast_map()
        except:
            break

    client.close()
    del players[name]
    del player_color_map[name]

# Server setup
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(('localhost', 12345))
server_socket.listen()

clients = []

def start_server():
    print("Server started. Waiting for players...")
    while True:
        client, address = server_socket.accept()
        clients.append(client)
        print(f"Player {address} connected.")
        threading.Thread(target=handle_client, args=(client, address)).start()

start_server()
